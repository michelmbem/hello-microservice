### Authenticate with username and password
POST {{auth.host}}/{{auth.realm_path}}/{{auth.token_path}}
Content-Type: application/x-www-form-urlencoded

client_id=order-service
    &grant_type={{api.order_service.grant_type}}
    &username={{api.order_service.username}}
    &password={{api.order_service.password}}
    &scope={{api.order_service.scopes}}

> {%
    client.test("Access token obtained from authorization server", () => {
        client.assert(response.status === 200, "Authentication failed");
        client.assert(response.body.access_token, "Access token is undefined");
    });

    client.global.set('user_access_token', response.body.access_token);
%}

### Authenticate to customer-service
POST {{auth.host}}/{{auth.realm_path}}/{{auth.token_path}}
Content-Type: application/x-www-form-urlencoded

client_id=customer-service
    &grant_type={{api.customer_service.grant_type}}
    &client_secret={{api.customer_service.secret}}

> {%
    client.test("Access token obtained from authorization server", () => {
        client.assert(response.status === 200, "Authentication failed");
        client.assert(response.body.access_token, "Access token is undefined");
    });

    client.global.set('customer_service_access_token', response.body.access_token);
%}

### Authenticate to product-service
POST {{auth.host}}/{{auth.realm_path}}/{{auth.token_path}}
Content-Type: application/x-www-form-urlencoded

client_id=product-service
    &grant_type={{api.product_service.grant_type}}
    &client_secret={{api.product_service.secret}}

> {%
    client.test("Access token obtained from authorization server", () => {
        client.assert(response.status === 200, "Authentication failed");
        client.assert(response.body.access_token, "Access token is undefined");
    });

    client.global.set('product_service_access_token', response.body.access_token);
%}

###